<?php
namespace StateEgE1;
include_once 'autoload.php';

echo "Состояние (англ. State) — поведенческий шаблон проектирования. Используется в 
тех случаях, когда во время выполнения программы объект должен менять своё поведение
в зависимости от своего состояния. 
 
Паттерн состоит из 3 блоков:

<br><br>Widget — класс, объекты которого должны менять своё поведение в зависимости от состояния.

<br><br>IState — интерфейс, который должен реализовать каждое из конкретных состояний. 
Через этот интерфейс объект Widget взаимодействует с состоянием, делегируя ему вызовы методов.
 Интерфейс должен содержать средства для обратной связи с объектом, поведение которого 
 нужно изменить. Для этого используется событие (паттерн Publisher — Subscriber). 
 Это необходимо для того, чтобы в процессе выполнения программы заменять объект 
 состояния при появлении событий. Возможны случаи, когда сам Widget периодически 
 опрашивает объект состояния на наличие перехода.

<br><br>StateA … StateZ — классы конкретных состояний. Должны содержать информацию о том, при 
каких условиях и в какие состояния может переходить объект из текущего состояния. 
Например, из StateA объект может переходить в состояние StateB и StateC, 
а из StateB — обратно в StateA и так далее. Объект одного из них должен содержать Widget при создании.

Применение данного паттерна может быть затруднено, если состояния должны обмениваться 
данными, или одно состояние настраивает свойства другого. В этом случае понадобится 
глобальный объект, что не очень хорошее архитектурное решение. 
 
 <i>[Электронный ресурс]: Википедия. Свободная энциклопедия.</i>
<br><br><br>";

//$t = new testclass();
//echo $t->test();

$context = new Context(new ConcreteStateA());
$context->request1();
$context->request2();


?>
